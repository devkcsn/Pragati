<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Quizzes</title>
    <link rel="icon" href="/assets/images/pragati_icon.png" type="image/x-icon">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/css/modern-navbar.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <style>
        /* Critical styles to ensure navbar elements are properly positioned */
        .navbar-link, .navbar-username {
            transform: none !important;
            opacity: 1 !important;
            visibility: visible !important;
        }
        .navbar-link i, .navbar-username i {
            opacity: 1 !important;
            visibility: visible !important;
            color: #ffffff !important;
        }
    </style>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f3f4f6;
            color: #2d3436;
        }
        
        .navbar {
            background-color: #333;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .navbar h1 {
            margin: 0;
            font-weight: 600;
            font-size: 1.5em;
        }
        
        .navbar .nav-links {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .navbar .nav-links a {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: color 0.3s ease;
        }
        
        .navbar .nav-links a:hover {
            color: #ccc;
        }
        
        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 15px;
        }
        
        .quiz-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .quiz-header h2 {
            font-weight: 600;
            color: #333;
        }
        
        .create-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: background-color 0.3s ease;
            text-decoration: none;
        }
        
        .create-btn:hover {
            background-color: #388E3C;
        }
        
        .quiz-filters {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .filter-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .filter-group label {
            font-weight: 500;
            color: #555;
            font-size: 0.9em;
        }
        
        .filter-group select, .filter-group input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: 'Poppins', sans-serif;
        }
        
        .search-box {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 250px;
            font-family: 'Poppins', sans-serif;
        }
        
        .quiz-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }
        
        .quiz-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            padding: 20px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .quiz-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .quiz-title {
            font-size: 1.2em;
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
        }
        
        .quiz-desc {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 15px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .quiz-meta {
            display: flex;
            justify-content: space-between;
            color: #777;
            font-size: 0.85em;
            margin-bottom: 15px;
        }
        
        .quiz-date, .quiz-questions {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .quiz-status {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 0.75em;
            font-weight: 500;
            margin-bottom: 15px;
        }
        
        .status-scheduled {
            background-color: #E3F2FD;
            color: #1976D2;
        }
        
        .status-active {
            background-color: #E8F5E9;
            color: #388E3C;
        }
        
        .status-completed {
            background-color: #FFEBEE;
            color: #D32F2F;
        }
        
        .quiz-actions {
            display: flex;
            gap: 10px;
        }
        
        .delete-btn {
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 0.85em;
            cursor: pointer;
            border: none;
            transition: background-color 0.3s ease;
            display: flex;
            align-items: center;
            gap: 5px;
            background-color: #F44336;
            color: white;
        }
        
        .delete-btn:hover {
            background-color: #D32F2F;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }
        
        .empty-state i {
            font-size: 4em;
            color: #ccc;
            margin-bottom: 20px;
        }
        
        .empty-state h3 {
            font-weight: 500;
            color: #555;
            margin-bottom: 10px;
        }
        
        .empty-state p {
            color: #777;
            margin-bottom: 20px;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 30px;
            gap: 5px;
        }
        
        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background-color: white;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .pagination button:hover {
            background-color: #f5f5f5;
        }
        
        .pagination button.active {
            background-color: #2196F3;
            color: white;
            border-color: #2196F3;
        }
          /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(3px);
            transition: all 0.3s ease;
        }
        
        .modal-content {
            background-color: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 500px;
            position: relative;
            transform: translateY(0);
            animation: modalFadeIn 0.3s ease-out;
            border-top: 4px solid #F44336;
        }
        
        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Results Modal Specific Styles */
        .results-modal-content {
            max-width: 900px;
            width: 90%;
            border-top: 4px solid #2196F3;
        }
          .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            margin-bottom: 20px;
            padding-bottom: 15px;
        }
        
        .modal-header h3 {
            margin: 0;
            color: #333;
            font-weight: 600;
            font-size: 1.4em;
        }
        
        .close-modal {
            font-size: 24px;
            cursor: pointer;
            color: #666;
            transition: all 0.2s;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }
        
        .close-modal:hover {
            color: #e74c3c;
            background-color: #f1f1f1;
        }
        
        .results-stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .stat-card {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px 25px;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            flex: 1;
            margin: 0 10px;
            min-width: 120px;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
        
        .stat-label {
            color: #6c757d;
            margin-top: 5px;
            font-size: 14px;
        }
        
        .results-table-container {
            max-height: 400px;
            overflow-y: auto;
            border-radius: 5px;
        }
        
        .results-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .results-table th, 
        .results-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }
        
        .results-table th {
            background-color: #f8f9fa;
            color: #495057;
            font-weight: 500;
            position: sticky;
            top: 0;
        }
        
        .results-table tr:hover {
            background-color: #f8f9fa;
        }
        
        .results-table td:nth-child(3) {
            font-weight: 500;
        }
        
        .auto-submit-tag {
            background-color: #ffcc80;
            color: #e65100;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
        }
        
        .manual-submit-tag {
            background-color: #a5d6a7;
            color: #1b5e20;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
        }
          .no-results {
            padding: 30px;
            text-align: center;
            color: #6c757d;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        
        .no-results i {
            font-size: 48px;
            margin-bottom: 15px;
            color: #adb5bd;
        }
        
        .modal-body {
            padding: 5px 0 20px 0;
            color: #555;
            font-size: 15px;
            line-height: 1.5;
        }
        
        .modal-body p {
            margin-bottom: 12px;
        }
        
        .modal-body strong {
            color: #333;
            font-weight: 600;
        }
        
        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 20px;
            border-top: 1px solid #eee;
            padding-top: 20px;
        }
        
        .modal-btn {
            padding: 10px 20px;
            border-radius: 6px;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
        }
        
        .cancel-btn {
            background-color: #f1f1f1;
            color: #333;
        }
        
        .cancel-btn:hover {
            background-color: #e0e0e0;
        }
        
        .confirm-btn {
            background-color: #F44336;
            color: white;
        }
        
        .confirm-btn:hover {
            background-color: #D32F2F;
        }
        
        .loading-row, .error-row {
            text-align: center;
            padding: 20px !important;
            color: #6c757d;
        }
        
        .error-row {
            color: #dc3545;
        }
        
        .error-row i {
            margin-right: 10px;
        }
        
        /* Quiz actions update */
        .quiz-actions {
            display: flex;
            gap: 10px;
        }
        
        .results-btn {
            background-color: #4caf50;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            display: flex;
            align-items: center;
            transition: background-color 0.3s;
        }
          .results-btn:hover {
            background-color: #388e3c;
        }
        
        /* Alert styles */
        .alert {
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 20px;
            animation: fadeIn 0.5s ease-out;
            display: none;
            font-weight: 500;
        }
        
        .alert-success {
            background-color: #e8f5e9;
            color: #2e7d32;
            border-left: 4px solid #4caf50;
        }
        
        .alert-error {
            background-color: #ffebee;
            color: #c62828;
            border-left: 4px solid #f44336;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Violation indicators */
        .violation-indicator {
            background-color: #ffcdd2;
            color: #c62828;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .violation-indicator:hover {
            background-color: #ef9a9a;
        }
        
        /* Frame viewer modal */
        .frames-modal-content {
            max-width: 800px;
            width: 90%;
            border-top: 4px solid #c62828;
        }
        
        .frames-carousel {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 15px 0;
        }
        
        .frame-image {
            max-width: 100%;
            max-height: 500px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .frame-caption {
            margin-top: 10px;
            font-size: 14px;
            color: #555;
            text-align: center;
        }
        
        .frame-navigation {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
        }
        
        .frame-nav-btn {
            background-color: #f1f1f1;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 14px;
            transition: background-color 0.2s;
        }
        
        .frame-nav-btn:hover {
            background-color: #e0e0e0;
        }
        
        .violation-message {
            background-color: #ffebee;
            border-left: 4px solid #c62828;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 4px;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .violation-timestamp {
            font-size: 12px;
            color: #666;
            margin-top: 8px;
        }
    </style>
</head>
<body><div class="modern-navbar">
        <div class="navbar-brand">
            <img src="/assets/images/pragati_icon.png" alt="Pragati Logo" class="navbar-logo">
            <h1 class="navbar-title">View Quizzes</h1>
        </div>
        <button class="navbar-toggle">
            <i class="fas fa-bars"></i>
        </button>
        <div class="navbar-menu">
            <div class="navbar-username">
                <i class="fas fa-user-tie"></i>
                Welcome, <%= user.firstName %> <%= user.lastName %>
            </div>
            <a href="/coordinatorDashboard" class="navbar-link">
                <i class="fas fa-tachometer-alt"></i>
                Dashboard
            </a>
            <a href="/createQuiz" class="navbar-link">
                <i class="fas fa-plus-circle"></i>
                Create Quiz
            </a>
            <a href="/logout" class="navbar-link logout-btn">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </a>
        </div>
    </div>
    
    <div class="container">
        <div id="alertMessage" class="alert"></div>
        
        <div class="quiz-header">
            <h2>Your Quizzes</h2>
            <a href="/createQuiz" class="create-btn">
                <i class="fas fa-plus"></i> Create New Quiz
            </a>
        </div>
        
        <div class="quiz-filters">
            <div class="filter-group">
                <label for="statusFilter">Status:</label>
                <select id="statusFilter">
                    <option value="all">All</option>
                    <option value="active">Active</option>
                    <option value="scheduled">Scheduled</option>
                    <option value="completed">Completed</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="dateFilter">Date:</label>
                <select id="dateFilter">
                    <option value="all">All Time</option>
                    <option value="today">Today</option>
                    <option value="thisWeek">This Week</option>
                    <option value="thisMonth">This Month</option>
                </select>
            </div>
            
            <div class="filter-group">
                <input type="text" id="searchBox" class="search-box" placeholder="Search quizzes...">
            </div>
        </div>
        
        <div id="quizContainer" class="quiz-grid">
            <!-- Quiz cards will be populated here dynamically -->
        </div>
        
        <div id="emptyState" class="empty-state" style="display: none;">
            <i class="fas fa-clipboard-list"></i>
            <h3>No Quizzes Found</h3>
            <p>You haven't created any quizzes yet or no quizzes match your filters.</p>
        </div>
        
        <div class="pagination" id="pagination">
            <!-- Pagination will be populated here dynamically -->
        </div>
    </div>
      <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Deletion</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this quiz? This action cannot be undone.</p>
                <p><strong>Quiz Title:</strong> <span id="deleteQuizTitle"></span></p>
            </div>
            <div class="modal-actions">
                <button class="modal-btn cancel-btn" id="cancelDelete">Cancel</button>
                <button class="modal-btn confirm-btn" id="confirmDelete">Delete Quiz</button>
            </div>
        </div>
    </div>
    
    <!-- Results Modal -->
    <div id="resultsModal" class="modal">
        <div class="modal-content results-modal-content">
            <div class="modal-header">
                <h3>Quiz Results: <span id="resultsQuizTitle"></span></h3>
                <span class="close-modal" id="closeResultsModal">&times;</span>
            </div>
            <div class="modal-body results-body">
                <div class="results-stats">
                    <div class="stat-card">
                        <div class="stat-value" id="totalAttempts">0</div>
                        <div class="stat-label">Attempts</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="averageScore">0%</div>
                        <div class="stat-label">Average Score</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="highestScore">0%</div>
                        <div class="stat-label">Highest Score</div>
                    </div>
                </div>
                <div class="results-table-container">
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>Student</th>
                                <th>Score</th>
                                <th>Percentage</th>
                                <th>Date Completed</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="resultsTableBody">
                            <!-- Results will be populated here -->
                        </tbody>
                    </table>
                    <div class="no-results" id="noResults">
                        <i class="fas fa-info-circle"></i>
                        <p>No students have attempted this quiz yet.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Violation Frames Modal -->
    <div id="framesModal" class="modal">
        <div class="modal-content frames-modal-content">
            <div class="modal-header">
                <h3>Violation Frames: <span id="violationStudentName"></span></h3>
                <span class="close-modal" id="closeFramesModal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="violation-message">
                    <p><strong>Warning:</strong> The following frames were captured when quiz security rules were violated. The system automatically captures frames when:</p>
                    <ul>
                        <li>Student looks away for 8+ seconds continuously (major violation)</li>
                        <li>Student looks away for 4+ seconds multiple times (3+ times)</li>
                    </ul>
                </div>
                
                <div class="frames-carousel">
                    <img id="currentFrame" class="frame-image" src="" alt="Violation frame">
                    <div class="frame-caption" id="frameCaption">Loading frame...</div>
                    <div class="frame-navigation">
                        <button class="frame-nav-btn" id="prevFrameBtn">
                            <i class="fas fa-chevron-left"></i> Previous
                        </button>
                        <span id="frameCounter">Frame 1 of 1</span>
                        <button class="frame-nav-btn" id="nextFrameBtn">
                            Next <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Store the current page and quizzes per page
        let currentPage = 1;
        const quizzesPerPage = 6;
        let allQuizzes = [];
        let filteredQuizzes = [];
        let deleteQuizId = null;
        let currentViolationFrames = []; // To store violation frames for current view
        let currentFrameIndex = 0; // Current frame index
          // DOM elements
        const quizContainer = document.getElementById('quizContainer');
        const emptyState = document.getElementById('emptyState');
        const pagination = document.getElementById('pagination');
        const statusFilter = document.getElementById('statusFilter');
        const dateFilter = document.getElementById('dateFilter');
        const searchBox = document.getElementById('searchBox');
        const deleteModal = document.getElementById('deleteModal');
        const resultsModal = document.getElementById('resultsModal');
        const framesModal = document.getElementById('framesModal');
        const closeModalBtn = document.querySelector('.close-modal');
        const closeResultsModalBtn = document.getElementById('closeResultsModal');
        const closeFramesModalBtn = document.getElementById('closeFramesModal');
        const cancelDeleteBtn = document.getElementById('cancelDelete');
        const confirmDeleteBtn = document.getElementById('confirmDelete');
        const deleteQuizTitle = document.getElementById('deleteQuizTitle');
        const resultsQuizTitle = document.getElementById('resultsQuizTitle');
        const totalAttempts = document.getElementById('totalAttempts');
        const averageScore = document.getElementById('averageScore');
        const highestScore = document.getElementById('highestScore');
        const resultsTableBody = document.getElementById('resultsTableBody');
        const noResults = document.getElementById('noResults');
        const alertMessage = document.getElementById('alertMessage');
        const violationStudentName = document.getElementById('violationStudentName');
        const currentFrame = document.getElementById('currentFrame');
        const frameCaption = document.getElementById('frameCaption');
        const frameCounter = document.getElementById('frameCounter');
        const prevFrameBtn = document.getElementById('prevFrameBtn');
        const nextFrameBtn = document.getElementById('nextFrameBtn');
        
        // Event listeners for filters
        statusFilter.addEventListener('change', applyFilters);
        dateFilter.addEventListener('change', applyFilters);
        searchBox.addEventListener('input', applyFilters);
          // Modal event listeners
        closeModalBtn.addEventListener('click', closeModal);
        closeResultsModalBtn.addEventListener('click', closeResultsModal);
        closeFramesModalBtn.addEventListener('click', closeFramesModal);
        cancelDeleteBtn.addEventListener('click', closeModal);
        confirmDeleteBtn.addEventListener('click', deleteQuiz);
        prevFrameBtn.addEventListener('click', showPreviousFrame);
        nextFrameBtn.addEventListener('click', showNextFrame);
        
        // Fetch quizzes when page loads
        document.addEventListener('DOMContentLoaded', fetchQuizzes);
        
        // Function to fetch quizzes from server
        function fetchQuizzes() {
            fetch('/api/quizzes')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    allQuizzes = data;
                    applyFilters();
                })
                .catch(error => {
                    console.error('Error fetching quizzes:', error);
                    showAlert('Error loading quizzes. Please try again later.', 'error');
                });
        }
        
        // Function to filter quizzes
        function applyFilters() {
            const status = statusFilter.value;
            const date = dateFilter.value;
            const searchQuery = searchBox.value.toLowerCase();
            
            filteredQuizzes = allQuizzes.filter(quiz => {
                let matchesStatus = status === 'all';
                let matchesDate = date === 'all';
                let matchesSearch = true;
                
                // Status filter - updated to match your database schema
                const now = new Date();
                const scheduledDate = new Date(quiz.scheduled_date);
                const deadlineDate = new Date(quiz.deadline_date);
                
                if (status === 'active' && quiz.is_active && now >= scheduledDate && now <= deadlineDate) {
                    matchesStatus = true;
                } else if (status === 'scheduled' && quiz.is_active && now < scheduledDate) {
                    matchesStatus = true;
                } else if (status === 'completed' && (now > deadlineDate || !quiz.is_active)) {
                    matchesStatus = true;
                }
                
                // Date filter
                const quizDate = new Date(quiz.created_date);
                const today = new Date(now.setHours(0, 0, 0, 0));
                
                if (date === 'today' && quizDate >= today) matchesDate = true;
                else if (date === 'thisWeek') {
                    const firstDayOfWeek = new Date(today);
                    firstDayOfWeek.setDate(today.getDate() - today.getDay());
                    if (quizDate >= firstDayOfWeek) matchesDate = true;
                }
                else if (date === 'thisMonth') {
                    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                    if (quizDate >= firstDayOfMonth) matchesDate = true;
                }
                
                // Search filter
                if (searchQuery) {
                    matchesSearch = 
                        quiz.title.toLowerCase().includes(searchQuery) || 
                        (quiz.description && quiz.description.toLowerCase().includes(searchQuery));
                }
                
                return matchesStatus && matchesDate && matchesSearch;
            });
            
            // Reset to first page when filters change
            currentPage = 1;
            renderQuizzes();
        }
        
        // Function to render quizzes
        function renderQuizzes() {
    quizContainer.innerHTML = '';
    
    if (filteredQuizzes.length === 0) {
        emptyState.style.display = 'block';
        pagination.style.display = 'none';
        return;
    }
    
    emptyState.style.display = 'none';
    
    // Calculate pagination
    const totalPages = Math.ceil(filteredQuizzes.length / quizzesPerPage);
    const startIndex = (currentPage - 1) * quizzesPerPage;
    const endIndex = Math.min(startIndex + quizzesPerPage, filteredQuizzes.length);
    
    // Display current page quizzes
    for (let i = startIndex; i < endIndex; i++) {
        const quiz = filteredQuizzes[i];
        
        // Determine quiz status based on dates and is_active flag
        let statusClass = 'status-scheduled';
        let statusText = 'Scheduled';
        
        const now = new Date();
        const scheduledDate = new Date(quiz.scheduled_date);
        const deadlineDate = new Date(quiz.deadline_date);
        
        if (!quiz.is_active) {
            statusClass = 'status-completed';
            statusText = 'Inactive';
        } else if (now > deadlineDate) {
            statusClass = 'status-completed';
            statusText = 'Completed';
        } else if (now >= scheduledDate && now <= deadlineDate) {
            statusClass = 'status-active';
            statusText = 'Active';
        }
        
        // Format dates
        const formattedScheduled = formatDate(quiz.scheduled_date);
        
        // Fix: Use question_count from API instead of quiz.questions.length
        const questionCount = quiz.question_count || 0;
        
        // Create quiz card
        const quizCard = document.createElement('div');
        quizCard.className = 'quiz-card';
        quizCard.innerHTML = `
            <div class="quiz-title">${quiz.title}</div>
            <div class="quiz-desc">${quiz.description || 'No description provided'}</div>
            <div class="quiz-meta">
                <div class="quiz-date">
                    <i class="far fa-calendar-alt"></i> ${formattedScheduled}
                </div>
                <div class="quiz-questions">
                    <i class="fas fa-question-circle"></i> ${questionCount} Questions
                </div>
            </div>            <span class="quiz-status ${statusClass}">${statusText}</span>
            <div class="quiz-actions">
                <button class="results-btn" data-quiz-id="${quiz.id}" data-quiz-title="${quiz.title}">
                    <i class="fas fa-chart-bar"></i> Results
                </button>
                <button class="delete-btn" data-quiz-id="${quiz.id}" data-quiz-title="${quiz.title}">
                    <i class="fas fa-trash"></i> Delete
                </button>
            </div>
        `;
        
        quizContainer.appendChild(quizCard);
    }
      // Add event listeners to delete buttons
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const quizId = this.getAttribute('data-quiz-id');
            const quizTitle = this.getAttribute('data-quiz-title');
            showDeleteModal(quizId, quizTitle);
        });
    });
    
    // Add event listeners to results buttons
    document.querySelectorAll('.results-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const quizId = this.getAttribute('data-quiz-id');
            const quizTitle = this.getAttribute('data-quiz-title');
            fetchAndShowResults(quizId, quizTitle);
        });
    });
    
    // Render pagination
    renderPagination(totalPages);
}

        
        // Function to render pagination
        function renderPagination(totalPages) {
            pagination.innerHTML = '';
            
            if (totalPages <= 1) {
                pagination.style.display = 'none';
                return;
            }
            
            pagination.style.display = 'flex';
            
            // Previous button
            const prevButton = document.createElement('button');
            prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
            prevButton.disabled = currentPage === 1;
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderQuizzes();
                }
            });
            pagination.appendChild(prevButton);
            
            // Page buttons
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            
            // Adjust start if we're near the end
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('button');
                pageButton.textContent = i;
                if (i === currentPage) {
                    pageButton.className = 'active';
                }
                pageButton.addEventListener('click', () => {
                    currentPage = i;
                    renderQuizzes();
                });
                pagination.appendChild(pageButton);
            }
            
            // Next button
            const nextButton = document.createElement('button');
            nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
            nextButton.disabled = currentPage === totalPages;
            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderQuizzes();
                }
            });
            pagination.appendChild(nextButton);
        }
        
        // Function to format date
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
          // Function to show delete confirmation modal
        function showDeleteModal(quizId, quizTitle) {
            deleteQuizId = parseInt(quizId, 10); // Ensure it's an integer
            deleteQuizTitle.textContent = quizTitle;
            
            // Show modal with animation
            deleteModal.style.display = 'flex';
            deleteModal.style.opacity = '0';
            setTimeout(() => {
                deleteModal.style.opacity = '1';
            }, 10);
            
            // Focus on the cancel button by default (safety)
            setTimeout(() => cancelDeleteBtn.focus(), 100);
        }
        
        // Function to close modal
        function closeModal() {
            // Hide with animation
            deleteModal.style.opacity = '0';
            setTimeout(() => {
                deleteModal.style.display = 'none';
            }, 300);
        }
        
        // Function to delete quiz
        function deleteQuiz() {
    if (!deleteQuizId) return;
    
    fetch(`/api/quizzes/${deleteQuizId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        },
        credentials: 'same-origin' // Include cookies for session authentication
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete quiz');
        }
        return response.json();
    })
    .then(data => {
        console.log('Quiz deleted successfully:', data);
        
        // Remove the quiz from arrays
        allQuizzes = allQuizzes.filter(quiz => quiz.id !== deleteQuizId);
        filteredQuizzes = filteredQuizzes.filter(quiz => quiz.id !== deleteQuizId);
        
        // Close modal and render updated quizzes
        closeModal();
        renderQuizzes();
        
        // Show success message
        showAlert('Quiz deleted successfully', 'success');
    })
    .catch(error => {
        console.error('Error deleting quiz:', error);
        showAlert('Error deleting quiz. Please try again.', 'error');
        closeModal();
    });
}        // Function to show alert message
        function showAlert(message, type) {
            // Add appropriate icon based on message type
            const icon = type === 'success' ? 
                '<i class="fas fa-check-circle" style="margin-right: 8px;"></i>' : 
                '<i class="fas fa-exclamation-triangle" style="margin-right: 8px;"></i>';
            
            alertMessage.innerHTML = `${icon}${message}`;
            alertMessage.className = `alert alert-${type}`;
            alertMessage.style.display = 'block';
            
            // Slide in animation handled by CSS
            
            // Hide after 5 seconds with fade out
            setTimeout(() => {
                alertMessage.style.opacity = '0';
                setTimeout(() => {
                    alertMessage.style.display = 'none';
                    alertMessage.style.opacity = '1';
                }, 300);
            }, 5000);
        }
        
        // Close modal if clicking outside
        window.addEventListener('click', (event) => {
            if (event.target === deleteModal) {
                closeModal();
            }
        });

        // Function to fetch quiz results and show the modal
        async function fetchAndShowResults(quizId, quizTitle) {
            try {
                // Show loading state
                resultsTableBody.innerHTML = '<tr><td colspan="5" class="loading-row">Loading results...</td></tr>';
                resultsQuizTitle.textContent = quizTitle;
                resultsModal.style.display = 'flex';
                
                // Fetch results from server
                const response = await fetch(`/api/quizzes/${quizId}/results`);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch quiz results');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to fetch quiz results');
                }
                
                // Update statistics
                totalAttempts.textContent = data.statistics.totalAttempts;
                averageScore.textContent = `${data.statistics.averageScore}%`;
                highestScore.textContent = `${data.statistics.highestScore}%`;
                
                // Populate results table
                if (data.attempts && data.attempts.length > 0) {
                    noResults.style.display = 'none';
                    resultsTableBody.innerHTML = '';
                    
                    data.attempts.forEach(attempt => {
                        const row = document.createElement('tr');
                        
                        row.innerHTML = `
                            <td>${attempt.studentName}</td>
                            <td>${attempt.score}/${attempt.total_questions}</td>
                            <td>${attempt.percentScore}%</td>
                            <td>${attempt.formattedDate}</td>
                            <td>${attempt.auto_submitted ? 
                                '<span class="auto-submit-tag">Auto-submitted</span>' : 
                                '<span class="manual-submit-tag">Manual</span>'}</td>
                        `;
                        resultsTableBody.appendChild(row);
                    });
                } else {
                    noResults.style.display = 'flex';
                    resultsTableBody.innerHTML = '';
                }
                
            } catch (error) {
                console.error('Error fetching quiz results:', error);
                
                // Show error message
                resultsTableBody.innerHTML = `
                    <tr>
                        <td colspan="5" class="error-row">
                            <i class="fas fa-exclamation-triangle"></i>
                            Failed to load results: ${error.message || 'Unknown error'}
                        </td>
                    </tr>
                `;
                
                noResults.style.display = 'none';
            }
        }
          // Function to close results modal
        function closeResultsModal() {
            resultsModal.style.display = 'none';
        }
        
        // Function to close frames modal
        function closeFramesModal() {
            framesModal.style.display = 'none';
            currentViolationFrames = [];
            currentFrameIndex = 0;
        }
          // Function to fetch and show violation frames
        async function showViolationFrames(quizId, studentId, studentName) {
            try {
                // Show the frames modal and set student name
                framesModal.style.display = 'flex';
                violationStudentName.textContent = studentName;
                
                // Show loading state
                currentFrame.src = '/assets/images/loading.gif';
                frameCaption.textContent = 'Loading violation frames...';
                frameCounter.textContent = 'Loading...';
                
                // Fetch the violation frames from the server
                const response = await fetch(`/api/quizzes/${quizId}/violations?studentId=${studentId}`);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch violation frames');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to fetch violation frames');
                }
                
                // Store the frames and reset index
                currentViolationFrames = data.frames;
                currentFrameIndex = 0;
                
                if (currentViolationFrames.length === 0) {
                    // No frames available
                    currentFrame.src = '/assets/images/no-image.png';
                    frameCaption.textContent = 'No violation frames available.';
                    frameCounter.textContent = 'No frames';
                    prevFrameBtn.disabled = true;
                    nextFrameBtn.disabled = true;
                } else {
                    // Show the first frame
                    showCurrentFrame();
                }
                
            } catch (error) {
                console.error('Error fetching violation frames:', error);
                currentFrame.src = '/assets/images/error.png';
                frameCaption.textContent = `Error: ${error.message || 'Unknown error'}`;
                frameCounter.textContent = 'Error loading frames';
            }
        }
        
        // Function to show the current frame
        function showCurrentFrame() {
            if (currentViolationFrames.length === 0) return;
            
            const frame = currentViolationFrames[currentFrameIndex];
            currentFrame.src = `data:image/jpeg;base64,${frame.frame_data}`;
            
            // Format the timestamp
            const timestamp = new Date(frame.timestamp);
            const formattedTime = timestamp.toLocaleString();
            
            // Create a readable violation type
            let violationType = frame.violation_type;
            if (violationType.includes('major_violation')) {
                violationType = 'Major Violation (8+ seconds looking away)';
            } else if (violationType.includes('early_warning')) {
                violationType = 'Looking Away (4+ seconds)';
            } else if (violationType.includes('multiple_violations')) {
                violationType = 'Multiple Violations (3+ incidents)';
            }
            
            frameCaption.innerHTML = `
                <strong>${violationType}</strong>
                <div class="violation-timestamp">${formattedTime}</div>
            `;
            
            frameCounter.textContent = `Frame ${currentFrameIndex + 1} of ${currentViolationFrames.length}`;
            
            // Update button states
            prevFrameBtn.disabled = currentFrameIndex === 0;
            nextFrameBtn.disabled = currentFrameIndex === currentViolationFrames.length - 1;
        }
        
        // Function to show the previous frame
        function showPreviousFrame() {
            if (currentFrameIndex > 0) {
                currentFrameIndex--;
                showCurrentFrame();
            }
        }
        
        // Function to show the next frame
        function showNextFrame() {
            if (currentFrameIndex < currentViolationFrames.length - 1) {
                currentFrameIndex++;
                showCurrentFrame();
            }
        }
    </script>    <script src="/assets/js/modern-navbar.js"></script>
    <script src="/assets/js/navbar-fix.js"></script>
</body>
</html>